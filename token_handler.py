import os
from cryptography.fernet import Fernet

class TokenHandler:
    def __init__(self):
        key = os.getenv("ENCRYPTION_KEY")
        if not key:
            raise ValueError("ENCRYPTION_KEY environment variable not set.")
        # ENCRYPTION_KEY must be a base64-encoded string generated by Fernet.generate_key()
        # ^ This is important!
        self.fernet = Fernet(key.encode())

    def encrypt(self, token: str) -> str:
        """Encrypt the plaintext token and return as a string."""
        encrypted = self.fernet.encrypt(token.encode())
        return encrypted.decode()

    def decrypt(self, encrypted_token: str) -> str:
        """Decrypt the encrypted token string and return the plaintext."""
        decrypted = self.fernet.decrypt(encrypted_token.encode())
        return decrypted.decode()


# Example usage:
# handler = TokenHandler()
# encrypted = handler.encrypt("my_github_token_here")
# print("Encrypted:", encrypted)
# decrypted = handler.decrypt(encrypted)
# print("Decrypted:", decrypted)
